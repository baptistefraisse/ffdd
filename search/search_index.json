{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FFDD \u2014 Fission Fragments Decay for Dummies","text":"<p>It is often said that the discovery of nuclear fission, in 1939, changed the course of human history [1]. But the true breakthrough was the realization that fission releases neutrons, unlocking the possibility of self-sustaining chain reactions and nuclear reactors [2]. This raises a fundamental question: Why does nuclear fission release neutrons at all?</p>"},{"location":"#scope-and-disclaimer","title":"Scope and disclaimer","text":"<p>FFDD is a lightweight and educational Python toolbox designed to simulate neutron emission in fission. Its purpose is pedagogical: it aims to help physics students understand the basic mechanisms behind neutron emissions in nuclear fission, and to perform simple but reasonably accurate predictions of neutron multiplicity.</p> <p>While the toolbox captures key features of fission fragment decay, many advanced phenomena are intentionally omitted. These simplifications were made to keep the physics accessible without significantly impacting the first-order behavior. For advanced users interested in high-accuracy modeling, the \"To go further\" section of the documentation points to some missing physical processes in FFDD and indicates more comprehensive codes used by nuclear physicists.</p> <p>Disclaimer: FFDD is not meant to compete with or replace high-fidelity simulation tools. It is not intended for precision nuclear data work or safety-critical applications.</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>ffdd/\n    data/          # data from the literature\n    decay.py       # decay modules\n    energy.py      # energy balance modules\n    mass.py        # nuclear mass reader\n    sepn.py        # separation energy reader\n    tke.py         # kinetic energy modules\n    utils.py       # global variables\n    yields.py      # fission yields reader\n\ntests/              # unitary tests\n\nvisual_tests/\n    plot_mass.py   # visual test: nuclear mass map\n    plot_sepn.py   # visual test: separation energy map\n    plot_tke.py    # visual test: kinetic energy plot\n    plot_yields.py # visual test: yields plots\n\nexamples/          \n    example1.py    # example: study of deformation\n</code></pre>"},{"location":"#main-modules","title":"Main modules","text":"<p>FFDD is composed of a few main modules (detailed in the \"API\" section):</p> <ul> <li><code>sepn</code>: reads neutron separation energies.</li> <li><code>nuclear_mass</code>: reads nuclear masses.</li> <li><code>fission_fragments_coupled</code>: reads independent fission yields.</li> <li><code>tke</code>: estimates the total kinetic energy of fragments.</li> <li><code>q_value</code>: estimates the available energy from mass default.</li> <li><code>txe_sharing</code>: shares the excitation energy between the two fragments.</li> <li><code>decay</code>: simulates the decay of a fragment by neutron emissions.</li> <li><code>nubar</code>: averages the number of emitted neutrons over all the fragments.</li> </ul> <p>Modules are designed as plug-ins that can be easily modified or replaced. This modular structure allows users to perform physics studies or extend the simulation with new features beyond those originally implemented.</p>"},{"location":"#references","title":"References","text":"<p>[1] L. Meitner and O. R. Frisch, Nature 143, 239\u2013240 (1939)</p> <p>[2] W. H. Zinn and L. Szilard, Phys. Rev. 56, 619 (1939)</p>"},{"location":"api/","title":"API","text":"<p>Reader of tabulated nuclear masses.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>Mass number.</p> required <code>z</code> <code>int</code> <p>Charge number.</p> required <p>Returns:</p> Name Type Description <code>m</code> <code>float</code> <p>Nuclear mass (MeV/c^2).</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If nucleus was not found in the mass table.</p> Source code in <code>ffdd/mass.py</code> <pre><code>def nuclear_mass(a, z):\n    \"\"\" Reader of tabulated nuclear masses.\n\n    Args:\n        a (int): Mass number.\n        z (int): Charge number.\n\n    Returns:\n        m (float): Nuclear mass (MeV/c^2).\n\n    Raises:\n        KeyError: If nucleus was not found in the mass table.\n    \"\"\"\n\n    try:\n        mass_excess = mass_dict[(z, a)] * KEV_TO_MEV\n    except KeyError:\n        raise KeyError(f'Mass for nucleus (Z={z}, A={a}) not available.')\n\n    return mass_excess + a*U_MEV\n</code></pre> <p>Single neutron separation energy.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>Mass number.</p> required <code>z</code> <code>int</code> <p>Charge number</p> required <p>Returns:</p> Name Type Description <code>sn</code> <code>float</code> <p>Single neutron separation energy (MeV).</p> Source code in <code>ffdd/sepn.py</code> <pre><code>def sepn(a, z):\n    \"\"\"Single neutron separation energy.\n\n    Args:\n        a (int): Mass number.\n        z (int): Charge number\n\n    Returns:\n        sn (float): Single neutron separation energy (MeV).\n    \"\"\"\n    n = a - z\n    sn = _s1n_dict.get((z, n), float(\"nan\"))\n    return sn\n</code></pre> <p>Reader of indepentend neutron-induced fission yield from nuclear data librairy ENDF/BVIII.0 for all available incident energies.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>Mass number of the target nucleus.</p> required <code>z</code> <code>int</code> <p>Charge number of the target nucleus.</p> required <p>Returns:</p> Name Type Description <code>energy_list</code> <code>list</code> <p>Incident energies (MeV).</p> <code>nfy_list</code> <code>dict</code> <p>Independent yields with (string format)</p> Source code in <code>ffdd/yields.py</code> <pre><code>def read_fission_yields(a, z):\n    \"\"\"\n    Reader of indepentend neutron-induced fission yield\n    from nuclear data librairy ENDF/BVIII.0 for all available\n    incident energies.\n\n    Args:\n        a (int): Mass number of the target nucleus.\n        z (int): Charge number of the target nucleus.\n\n    Returns:\n        energy_list (list): Incident energies (MeV).\n        nfy_list (dict): Independent yields with (string format)\n    \"\"\"\n\n    if z in fiss_z_to_name:\n        atom_name = fiss_z_to_name[z]\n    else:\n        raise ValueError(f\"ERROR: Target nucleus Z={z} unavailable in NFY data.\")\n\n    filename = f\"data/yields/nfy-{z:03d}_{atom_name}_{a}.endf\"\n    filepath = os.path.join(os.path.dirname(__file__), filename)\n    if not os.path.exists(filepath):\n        raise FileNotFoundError(\n            f\"ERROR: Target nucleus (A={a},Z={z}) unavailable in NFY data.\"\n        )\n\n    nfy_eval = openmc.data.FissionProductYields(filepath)\n    energy_list = nfy_eval.energies\n    nfy_list = nfy_eval.independent\n    energy_list = [e*1e-6 for e in energy_list] # eV to MeV\n\n    return energy_list, nfy_list\n</code></pre> <p>Convert yields read from ENDF/BVIII.0 into lists of three floats: mass, charge and probability for each fragment.</p> <p>Parameters:</p> Name Type Description Default <code>nfy</code> <code>dict</code> <p>Neutron fission yields at a given energy.</p> required <p>Returns:</p> Name Type Description <code>ff</code> <code>array</code> <p>Fragments 5-uples [A,Z,P] with</p> <code>A</code> <code>int</code> <p>Mass number of the fragment, </p> <code>Z</code> <code>int</code> <p>Charge number of the fragment,</p> <code>P</code> <code>float</code> <p>Fragmentation probability.</p> Source code in <code>ffdd/yields.py</code> <pre><code>def fission_fragments(nfy):\n    \"\"\"\n    Convert yields read from ENDF/BVIII.0 into lists of three\n    floats: mass, charge and probability for each fragment.\n\n    Args:\n        nfy (dict): Neutron fission yields at a given energy.\n\n    Returns:\n        ff (array): Fragments 5-uples [A,Z,P] with\n        A (int): Mass number of the fragment, \n        Z (int): Charge number of the fragment,\n        P (float): Fragmentation probability.\n    \"\"\"\n\n    # list of fission fragments and associated probability\n\n    ff = []\n\n    for nucleus, value in nfy.items():\n\n        match = re.match(r\"([A-Za-z]+)(\\d+)\", nucleus)\n\n        if match:\n\n            element, a = match.groups()\n            a = int(a)\n            z = int(periodic_table[element])\n            proba_float = value.n if hasattr(value, \"nominal_value\") else float(value)\n            ff.append([a, z, proba_float])\n\n    # merging isomeric (metastables) states\n\n    ff_isom_merged_dict = defaultdict(float)\n\n    for A, Z, p in ff:\n        ff_isom_merged_dict[(A, Z)] += p\n\n    ff_isom_merged_list = [(A, Z, p) for (A, Z), p in sorted(ff_isom_merged_dict.items())]\n\n    return ff_isom_merged_list\n</code></pre> <p>Coupling of fission fragments by mass and charge conservation.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>Mass number of the target.</p> required <code>z</code> <code>int</code> <p>Charge number of the target.</p> required <code>nfy</code> <code>list</code> <p>Neutron fission yields at a given energy.</p> required <p>Returns:</p> Name Type Description <code>ff</code> <code>array</code> <p>Coupled fission fragments 5-uples [Ah,Zh,Al,Zl,P] with   Ah (int): Heavy fragment mass number,    Zh (int): Heavy fragment charge number,   Al (int): Light fragment mass number,   Zl (int): Light fragment charge number,   P (float): Fragmentation probability.</p> Source code in <code>ffdd/yields.py</code> <pre><code>def fission_fragments_coupled(a, z, nfy):\n    \"\"\"\n    Coupling of fission fragments by mass and charge conservation.\n\n    Args:\n        a (int): Mass number of the target.\n        z (int): Charge number of the target.\n        nfy (list): Neutron fission yields at a given energy.\n\n    Returns:\n        ff (array): Coupled fission fragments 5-uples [Ah,Zh,Al,Zl,P] with\n              Ah (int): Heavy fragment mass number, \n              Zh (int): Heavy fragment charge number,\n              Al (int): Light fragment mass number,\n              Zl (int): Light fragment charge number,\n              P (float): Fragmentation probability.\n    \"\"\"\n\n    ff = fission_fragments(nfy)\n    ff_coupled = []\n\n    for k in range(len(ff) // 2):\n        al, zl, p = ff[k]\n        ah = a + 1 - al # incident neutron: +1\n        zh = z - zl\n        ff_coupled.append([ah, zh, al, zl, p])\n\n    return ff_coupled\n</code></pre> <p>Nuclear radius from the incompressible model (r0 = 1.2 fm).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>Mass number of the nucleus.</p> required <p>Returns:</p> Name Type Description <code>r</code> <code>float</code> <p>Radius of the nucleus (fm).</p> Source code in <code>ffdd/tke.py</code> <pre><code>def nuclear_radius(a):\n    \"\"\"\n    Nuclear radius from the incompressible model (r0 = 1.2 fm).\n\n    Args:\n        a (int): Mass number of the nucleus.\n\n    Returns:\n        r (float): Radius of the nucleus (fm).\n    \"\"\"\n\n    return NUCLEAR_RADIUS_R0 * pow(a, 1 / 3)\n</code></pre> <p>Compute total kinetic energy (TKE) of fission fragments with the simple model of two charged spheres in contact.</p> <p>Parameters:</p> Name Type Description Default <code>ah</code> <code>int</code> <p>Mass number of the heavy fragment.</p> required <code>zh</code> <code>int</code> <p>Charge number of the heavy fragment.</p> required <code>al</code> <code>int</code> <p>Mass number of the light fragment.</p> required <code>zl</code> <code>int</code> <p>Charge number of the light fragment.</p> required <code>beta</code> <code>float</code> <p>Quadrupolar deformation coefficient.</p> <code>0.2</code> <p>Returns:</p> Name Type Description <code>tke</code> <code>float</code> <p>Total kinetic energy (MeV).</p> Source code in <code>ffdd/tke.py</code> <pre><code>def tke(ah, zh, al, zl, beta = 0.2):\n    \"\"\"\n    Compute total kinetic energy (TKE) of fission fragments\n    with the simple model of two charged spheres in contact.\n\n    Args:\n        ah (int): Mass number of the heavy fragment.\n        zh (int): Charge number of the heavy fragment.\n        al (int): Mass number of the light fragment.\n        zl (int): Charge number of the light fragment.\n        beta (float): Quadrupolar deformation coefficient.\n\n    Returns:\n        tke (float): Total kinetic energy (MeV).\n    \"\"\"\n\n    # nuclear radii (fm)\n\n    rh = nuclear_radius(ah)\n    rl = nuclear_radius(al)\n    initial_distance = (rh + rl) * (1 + 2 * beta)\n\n    # Total kinetic energy (MeV)\n\n    tke = COULOMB_CST * zh * zl / initial_distance\n\n    return tke\n</code></pre> <p>Q-value of neutron-induced fission.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>Mass number of the target nucleus.</p> required <code>z</code> <code>int</code> <p>Charge number of the target nucleus.</p> required <code>ah</code> <code>int</code> <p>Mass number of the heavy fragment.</p> required <code>zh</code> <code>int</code> <p>Charge number of the heavy fragment.</p> required <code>al</code> <code>int</code> <p>Mass number of the light fragment.</p> required <code>zl</code> <code>int</code> <p>Charge number of the lighe fragment.</p> required <code>energy</code> <code>float</code> <p>Incident neutron energy (MeV).</p> required <p>Returns:</p> Name Type Description <code>q</code> <code>float</code> <p>Q-value (MeV).</p> Source code in <code>ffdd/energy.py</code> <pre><code>def q_value(a, z, ah, zh, al, zl, energy):\n    \"\"\"\n    Q-value of neutron-induced fission.\n\n    Args:\n        a (int): Mass number of the target nucleus.\n        z (int): Charge number of the target nucleus.\n        ah (int): Mass number of the heavy fragment.\n        zh (int): Charge number of the heavy fragment.\n        al (int): Mass number of the light fragment.\n        zl (int): Charge number of the lighe fragment.\n        energy (float): Incident neutron energy (MeV).\n\n    Returns:\n        q (float): Q-value (MeV).\n    \"\"\"\n\n    # fission properties\n\n    m = nuclear_mass(a, z)\n    sn = sepn(a, z)\n    mh = nuclear_mass(ah, zh)\n    ml = nuclear_mass(al, zl)\n\n    # q-value definition\n\n    q = m + NEUTRON_MASS + sn + energy - mh - ml\n\n    return q\n</code></pre> <p>Fong model for excitation energy sharing between fragments (nucleons gas at thermal equilibrium).</p> <p>Parameters:</p> Name Type Description Default <code>ah</code> <code>int</code> <p>Mass number of the heavy fragment.</p> required <code>al</code> <code>int</code> <p>Mass number of the light fragment.</p> required <p>Returns:</p> Name Type Description <code>x</code> <code>float</code> <p>Excitation energy sharing factor (0&lt;x&lt;1).</p> Source code in <code>ffdd/energy.py</code> <pre><code>def fong(ah, al):\n    \"\"\"\n    Fong model for excitation energy sharing between fragments\n    (nucleons gas at thermal equilibrium).\n\n    Args:\n        ah (int): Mass number of the heavy fragment.\n        al (int): Mass number of the light fragment.\n\n    Returns:\n        x (float): Excitation energy sharing factor (0&lt;x&lt;1).\n    \"\"\"\n\n    x = al / (al + ah)\n    return x\n</code></pre> <p>Von Edigy (BSGF) model for excitation energy sharing between fragments. See: T. von Edigy and D. Bucurescu, Phys. Rev. C 72, 044311 (2005).</p> <p>Parameters:</p> Name Type Description Default <code>ah</code> <code>int</code> <p>Mass number of the heavy fragment.</p> required <code>zh</code> <code>int</code> <p>Charge number of the heavy fragment.</p> required <code>al</code> <code>int</code> <p>Mass number of the light fragment.</p> required <code>zl</code> <code>int</code> <p>Charge number of the lighe fragment.</p> required <p>Returns:</p> Name Type Description <code>x</code> <code>float</code> <p>Excitation energy sharing factor.</p> Source code in <code>ffdd/energy.py</code> <pre><code>def edigy(ah, zh, al, zl):\n    \"\"\"\n    Von Edigy (BSGF) model for excitation energy sharing between fragments.\n    See: T. von Edigy and D. Bucurescu, Phys. Rev. C 72, 044311 (2005).\n\n    Args:\n        ah (int): Mass number of the heavy fragment.\n        zh (int): Charge number of the heavy fragment.\n        al (int): Mass number of the light fragment.\n        zl (int): Charge number of the lighe fragment.\n\n    Returns:\n        x (float): Excitation energy sharing factor.\n    \"\"\"\n\n    # von Edigy/BSGF model parameters\n\n    p = 0.1271\n    q = 4.9813e-3\n    r = -8.9553e-5\n\n    # heavy fragment\n\n    pdh = (\n        0.5\n        * pow(-1, zh)\n        * (\n            -nuclear_mass(ah + 2, zh + 1)\n            + 2 * nuclear_mass(ah, zh)\n            - nuclear_mass(ah - 2, zh - 1)\n        )\n    )\n    if ah % 2 == 0 and zh % 2 == 0:  # even-even nucleus\n        deltah = 0.5 * pdh\n    elif ah % 2 == 1 and zh % 2 == 1:  # odd-odd nucleus\n        deltah = - 0.5 * pdh\n    else:\n        deltah = 0\n    sh = sepn(ah, zh) - deltah\n    dh = ah * (p + q * sh + r * ah)\n\n    # light fragment\n\n    pdl = (\n        0.5\n        * pow(-1, zl)\n        * (\n            -nuclear_mass(al + 2, zl + 1)\n            + 2 * nuclear_mass(al, zl)\n            - nuclear_mass(al - 2, zl - 1)\n        )\n    )\n    if al % 2 == 0 and zl % 2 == 0:  # even-even nucleus\n        deltal = 0.5 * pdl\n    elif ah % 2 == 1 and zh % 2 == 1:  # odd-odd nucleus\n        deltal = - 0.5 * pdl\n    else:\n        deltal = 0\n    sl = sepn(al, zl) - deltal\n    dl = al * (p + q * sl + r * al)\n\n    # sharing factor\n\n    x = dl / (dl + dh)\n    return x\n</code></pre> <p>Sharing of the Total Excitation Energy between the two fission fragments.</p> <p>Parameters:</p> Name Type Description Default <code>txe</code> <code>float</code> <p>Total Excitation Energy (MeV).</p> required <code>ah</code> <code>int</code> <p>Mass number of the heavy fragment.</p> required <code>zh</code> <code>int</code> <p>Charge number of the heavy fragment.</p> required <code>al</code> <code>int</code> <p>Mass number of the light fragment.</p> required <code>zl</code> <code>int</code> <p>Charge number of the lighe fragment.</p> required <code>model</code> <code>str</code> <p>Model for excitation energy sharing ('fong' or 'edigy').</p> <code>'fong'</code> <code>rt</code> <code>float</code> <p>Anisothermal factor.</p> <code>1.0</code> <p>Returns:</p> Name Type Description <code>xeh</code> <code>float</code> <p>Excitation energy of the heavy fragment (MeV).</p> <code>xel</code> <code>float</code> <p>Excitation energy of the light fragment (MeV).</p> Source code in <code>ffdd/energy.py</code> <pre><code>def txe_sharing(txe, ah, zh, al, zl, model=\"fong\", rt=1.0):\n    \"\"\"\n    Sharing of the Total Excitation Energy between the two fission fragments.\n\n    Args:\n        txe (float): Total Excitation Energy (MeV).\n        ah (int): Mass number of the heavy fragment.\n        zh (int): Charge number of the heavy fragment.\n        al (int): Mass number of the light fragment.\n        zl (int): Charge number of the lighe fragment.\n        model (str): Model for excitation energy sharing ('fong' or 'edigy').\n        rt (float): Anisothermal factor.\n\n    Returns:\n        xeh (float): Excitation energy of the heavy fragment (MeV).\n        xel (float): Excitation energy of the light fragment (MeV).\n    \"\"\"\n\n    # energy partition factor\n\n    if model == \"fong\":\n        x = fong(ah, al)\n\n    elif model == \"edigy\":\n        x = edigy(ah, zh, al, zl)\n\n    # thermal equilibrium\n\n    x = pow(rt, 2) * x\n\n    # excitation energy partition\n\n    xel = x * txe\n    xeh = (1 - x) * txe\n\n    return xeh, xel\n</code></pre> <p>Decay of an excited nucleus by neutron emissions.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>Mass number of the nucleus.</p> required <code>z</code> <code>int</code> <p>Charge number of the nucleus.</p> required <code>xe</code> <code>float</code> <p>Excitation energy of the nucleus (MeV). </p> required <code>ekin</code> <code>float</code> <p>Average kinetic energy of emitted neutrons (MeV).</p> required <p>Returns:</p> Name Type Description <code>nu</code> <code>int</code> <p>Number of emitted neutrons.</p> <code>xe</code> <code>float</code> <p>Residual excitation energy (MeV).</p> Source code in <code>ffdd/decay.py</code> <pre><code>def decay(a, z, xe, ekin):\n    \"\"\"\n    Decay of an excited nucleus by neutron emissions.\n\n    Args:\n        a (int): Mass number of the nucleus.\n        z (int): Charge number of the nucleus.\n        xe (float): Excitation energy of the nucleus (MeV). \n        ekin (float): Average kinetic energy of emitted neutrons (MeV).\n\n    Returns:\n        nu (int): Number of emitted neutrons.\n        xe (float): Residual excitation energy (MeV).\n    \"\"\"\n\n    # init\n\n    nu = 0\n    sn = sepn(a, z)\n\n    # sequential neutron evaporation\n\n    while xe &gt; sn:\n        nu += 1\n        a -= 1\n        xe -= sn + ekin\n        sn = sepn(a, z)\n\n    return nu, xe\n</code></pre> <p>Average neutron multiplicity in fission.</p> <p>Parameters:</p> Name Type Description Default <code>a_target</code> <code>int</code> <p>Mass number of the target fissile nucleus.</p> required <code>z_target</code> <code>int</code> <p>Charge number of the target fissile nucleus.</p> required <code>ekin</code> <code>float</code> <p>Average kinetic energy of emitted neutrons (MeV).</p> <code>2.0</code> <code>beta</code> <code>float</code> <p>Average quadrupolar deformation of fragments. </p> <code>0.2</code> <code>model</code> <code>str</code> <p>Energy sharing model ('fong' or 'edigy'). </p> <code>'fong'</code> <code>rt</code> <code>float</code> <p>Anisothermal coefficient. </p> <code>1</code> <p>Returns:</p> Name Type Description <code>energies</code> <code>float list</code> <p>incident energies available in the literature (MeV).</p> <code>nubar_vs_energy</code> <code>float list</code> <p>average total number of emitted neutrons for each energy.</p> Source code in <code>ffdd/decay.py</code> <pre><code>def nubar(a_target, z_target, ekin = 2.0, beta = 0.2, model = 'fong', rt = 1):\n    \"\"\"\n    Average neutron multiplicity in fission.\n\n    Args:\n        a_target (int): Mass number of the target fissile nucleus.\n        z_target (int): Charge number of the target fissile nucleus.\n        ekin (float): Average kinetic energy of emitted neutrons (MeV).\n        beta (float): Average quadrupolar deformation of fragments. \n        model (str): Energy sharing model ('fong' or 'edigy'). \n        rt (float): Anisothermal coefficient. \n\n    Returns:\n        energies (float list): incident energies available in the literature (MeV).\n        nubar_vs_energy (float list): average total number of emitted neutrons for each energy.\n    \"\"\"\n\n    # scan of available incident energies\n\n    energies, nfys = read_fission_yields(a_target, z_target)\n    nubar_vs_energy = []\n\n    # loop on available incident energies\n\n    for k in range(len(energies)):\n\n        total_proba = 0\n        nu_list, proba_list = [], []\n        energy = energies[k]\n        nfy = nfys[k]\n\n        # scan of fragmentations for one given incident energy\n\n        for ah, zh, al, zl, proba in fission_fragments_coupled(a_target, z_target, nfy):\n\n            # fragments masses and separation energies from data\n\n            try:\n                q = q_value(a_target, z_target, ah, zh, al, zl, energy)\n                total_proba += proba\n\n            except KeyError:\n                continue\n\n            # energy balance for this fragmentation\n\n            tke_ff = tke(ah, zh, al, zl, beta)\n            txe = q - tke_ff\n\n            # excitation energy sharing between fragments\n\n            try:   \n                xeh, xel = txe_sharing(txe, ah, zh, al, zl, model=model, rt=rt)\n\n            except KeyError:\n                continue\n\n            # neutron decay cascade of the excited fragments\n\n            nuh, _ = decay(ah, zh, xeh, ekin=ekin)\n            nul, _ = decay(al, zl, xel, ekin=ekin)\n\n            # total emissions by the two fragments\n\n            nu = nuh + nul\n            nu_list.append(nu)\n            proba_list.append(proba)\n\n        # average decay of fission over all fragmentations\n\n        proba_list = np.array(proba_list) / total_proba\n        nubar_vs_energy.append(np.average(nu_list, weights = proba_list))\n\n    return energies, nubar_vs_energy\n</code></pre>"},{"location":"example/","title":"An example","text":""},{"location":"example/#role-of-fragment-deformation","title":"Role of Fragment Deformation","text":"<p>The deformation of fission fragments plays a key role in the energy balance of nuclear fission. Indeed, the more elongated the fragments are along the fission axis, the further apart their charge barycenters and the weaker the Coulomb repulsion work. To study the influence of fragment deformation more precisely, the example script varies the average quadrupole deformation \\(\\beta\\) from 0.15 to 0.25 in neutron-induced fission of uranium-235. The resulting effect on the average neutron multiplicity is plotted below and compared with the evaluated nuclear data library ENDF/B-VIII.0, which is based on precision measurements.</p> <p></p> <p>The average quadrupole deformation \\(\\beta\\) appears to be a very sensitive parameter for the number of emitted neutrons! Along our exciting path tracking the origin of neutron emissions in fission, we revealed a crucial component: emitted neutrons primarily serve to release the deformation energy stored in fragments. For experimental nuclear physicists, precise measurements of neutron multiplicity are actually the key to accessing the otherwise invisible deformation of fission fragments. In addition, the increasing trend of neutron multiplicity with higher incident energies is fairly predicted. This result confirms the accuracy of the energy partition model.</p>"},{"location":"further/","title":"To go futher","text":""},{"location":"further/#future-improvements","title":"Future improvements","text":"<p>FFDD uses strong assumptions to highlight the main phenomena driving the emission of fission neutrons. Some phenomena are omitted and others are oversimplified, opening the way for future improvements:</p> <ul> <li> <p>The total kinetic energy (TKE) is estimated using a constant quadrupole deformation parameter, whereas in reality, \\(\\beta\\) could vary with the specific fragmentation: \\(\\beta = \\beta(A_h, Z_h, A_l, Z_l)\\).</p> </li> <li> <p>Total kinetic energy considers only the Coulomb repulsion between fragments, neglecting the contribution from nuclear forces at scission [1].</p> </li> <li> <p>The decay cascade of fission fragments is assumed to emit all neutrons before \\(\\gamma\\)-rays. However, many experimental results highlight a more complex competition between neutrons and \\(\\gamma\\)-rays emissions [2], which may originate, at least in part, from angular momentum conservation and sharing.</p> </li> <li> <p>At high incident energies, the target nucleus may become sufficiently excited to emit one or more neutrons before undergoing fission. This phenomenon, known as multi-chance fission, is significant above 5\u20136 MeV [3].</p> </li> <li> <p>The kinetic energy of emitted neutrons, \\(e_n\\), is assumed constant. A more precise estimation could be obtained from a specific evaporation spectrum for each fragment, such as that derived from the Hauser-Feshbach formalism [4], using an optical potential like that of Koning-Delaroche [5] or Chapel Hill [6].</p> </li> </ul>"},{"location":"further/#advanced-fission-codes","title":"Advanced Fission Codes","text":"<p>More advanced fission codes are available and may include, at least in part, some of the phenomena listed in the previous section: CGMF [7], FREYA [8], FIFRELIN [9], or GEF [10]. Unlike FFDD, these codes rely on Monte Carlo simulation of the fission fragments decay process. GEF includes its own fission fragment generator.</p>"},{"location":"further/#references","title":"References","text":"<p>[1] A. Bulgac et al., Phys. Rev. Lett. 126, 142502 (2021)</p> <p>[2] H. Nifenecker et al., Nucl. Phys. A 189, 285-304 (1972)</p> <p>[3] B. Fra\u00efsse et al., Phys. Rev. C 108, 014610 (2023)</p> <p>[4] W. Hauser and H. Feshbach, Phys. Rev. 87, 366 (1952).</p> <p>[5] A. J. Koning and J. P. Delaroche, Nucl. Phys. A 713, 231\u2013310 (2003).</p> <p>[6] R. Varner et al., Phys. Rep. 201, 57 (1991).</p> <p>[7] A. E. Lovell and T. Kawano, Nucl. Data Sheets 163, 338\u2013356 (2020).</p> <p>[8] O. Litaize, O. Serot, and L. Berge, European Phys. J A 51, 177 (2015).</p> <p>[9] J. Randrup and R. Vogt, Phys. Rev. C 80, 024601 (2009).</p> <p>[10] K.-H. Schmidt and B. Jurado, Nucl. Data Sheets 173, 239\u2013305 (2021).</p>"},{"location":"installation/","title":"Installation","text":"<p>To install the FFDD package, first clone the github repository.</p> <pre><code>git clone https://github.com/baptistefraisse/ffdd.git\ncd ffdd\n</code></pre> <p>To install the FFDD dependencies\u2014especially OpenMC to read the fission yield data libraries\u2014it is recommended to create and activate a virtual environment, then install all dependencies from the <code>requirements.txt</code> file:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate   # Linux or macOS\n.venv\\Scripts\\Activate      # Windows\npip install -r requirements.txt\n</code></pre> <p>Alternatively, you may use conda to create the virtual environment if preferred.</p>"},{"location":"installation/#use","title":"Use","text":"<p>With the virtual environment activated, install FFDD in editable mode from the repository root (the folder containing <code>pyproject.toml</code>):</p> <pre><code>pip install -e .\npip show ffdd\n</code></pre> <p>This allows you to modify the source code locally and use the updated version without reinstalling the package each time.</p>"},{"location":"installation/#examples","title":"Examples","text":"<p>To launch the example, or your own script, use the python3 command in the same folder.</p> <pre><code>cd examples\npython3 example.py\n</code></pre>"},{"location":"physics/","title":"Physics models","text":"<p>This page describes the physics models used by FFDD to estimate the number of emitted neutrons in nuclear fission.</p>"},{"location":"physics/#the-origin-of-fission-neutron-emissions","title":"The origin of fission neutron emissions","text":"<p>Just as molecules can evaporate from hot matter, or electrons can ionize from excited atoms, nucleons can escape a nucleus when its excitation energy exceeds their binding energy. Due to the presence of the Coulomb barrier, the binding energy of protons is significantly higher than that of neutrons, making neutron emission far more likely. </p> <p>As a result, a neutron emission from a given nucleus \\((A,Z)\\) can be predicted by comparing its excitation energy to the smallest neutron binding energy \\(S_n(A,Z)\\)\u2014called the separation energy\u2014in that nucleus. Neutron separation energies are tabulated for a wide range of nuclei, and FFDD relies on the data base released by LANL [1]. </p> <p>According to our current understanding, supported by extensive experimental data, fission neutrons are primarily emitted by the excited fragments resulting from the splitting of the target nucleus \\((A_t,Z_t)\\). Generally, there is a heavy fragment \\((A_h,Z_h)\\) and a light fragment \\((A_l,Z_l)\\). Due to charge and mass conservation, \\(Z_t=Z_h+Z_l\\), and \\(A_t+1=A_h+A_l\\).</p> <p>Based on this assumption, one can estimate the average number of neutrons emitted by evaluating the average excitation energy of each fragment and comparing it to their neutron separation energies.</p> <p>The following sections will describe, first, how to determine the fission fragments, and second, how to evaluate their excitation energy.</p>"},{"location":"physics/#fission-fragments-distributions","title":"Fission fragments distributions","text":"<p>Nuclear fission is a quantum process, which makes it fundamentally impossible to predict the exact fission fragments resulting from a single event. However, when considering a large number of fission events, the fission fragments follow a probability distribution \\(p(A_h,Z_h,A_l,Z_l)\\), commonly referred to as the independent fission yields. To this day, it remains impossible to derive these yields precisely from first principles, as the collective behavior of many nucleons under the nuclear force is still not fully understood. As a result, all simulation codes rely on evaluated nuclear data libraries, which are constructed from experimental measurements. FFDD relies on a function from OpenMC [2], an open-source neutronics code, to read evaluated fission yields from the ENDF/B-VIII.0 nuclear data library [3].</p>"},{"location":"physics/#fission-energy-balance","title":"Fission energy balance","text":"<p>Nuclear fission is usually an exothermic reaction. The total released energy \\(Q\\) can be deduced from the precise nuclear masses \\(M\\) of fragments through the famous Einstein's formula involving the speed of light \\(c\\). To evaluate the \\(Q\\)-values, for each possible fragmentations, FFDD relies on tabulated nuclear masses [4]. In neutron-induced fission, the released enegy is given by the missing mass and incident neutron energy \\(E_n\\) as: </p> \\[ Q(A_h,Z_h,A_l,Z_l)=[M(A_t+1,Z_t)c^2+E_n]-[M(A_h,Z_h)c^2-M(A_l,Z_l)c^2]. \\] <p>The \\(Q\\)-value tells us how much energy nuclear fission releases \u2014 but where does it go? We known that fragments repel each others: they have a Total Kinetic Energy (TKE). Just as classical thermodynamics, the energy balance is completed by an internal energy, called Total Excitation Energy (TXE), such as</p> \\[ Q(A_h,Z_h,A_l,Z_l) = TKE(A_h,Z_h,A_l,Z_l) + TXE(A_h,Z_h,A_l,Z_l). \\]"},{"location":"physics/#fission-fragments-kinetic-energy","title":"Fission fragments kinetic energy","text":"<p>Assuming that the Total Kinetic Energy (TKE) of the fission fragments originates primarily from their mutual electrostatic repulsion, it can be approximated by the Coulomb potential energy between two charged particles of charge \\(Z_l\\) and \\(Z_h\\), initially separated by an average distance \\(d\\) at the moment of scission</p> \\[ TKE(A_h,Z_h,A_l,Z_l) \\approx k \\times \\frac{Z_h\\,Z_l}{d}, \\] <p>where \\(k\\) the Coulomb constant. To estimate the average distance \\(d\\) between the two fragments at scission, FFDD models their radii using the liquid drop approximation:  \\(r_h(A_h)=r_0\\,A_h^{1/3}\\) and \\(r_l(A_l)=r_0\\, A_l^{1/3}\\), with \\(r_0=1.2\\) fm [4]. If both fragments were spherical at scission, the center-to-center distance would simply be \\(d=r_h+r_l\\). However, fission fragments are typically deformed. At first order, one can account for this by assuming a quadrupole deformation parameter \\(\\beta\\) leading to an effective distance \\(d\\approx(1+2\\beta)(r_h+r_l)\\) [5]. This correction captures the elongation of the fragments along the fission axis and provides a more realistic estimate of the Coulomb repulsion at scission, as follows</p> \\[ TKE(A_h,Z_h,A_l,Z_l) \\approx k \\times \\frac{Z_h\\,Z_l}{r_0(1+2\\beta)(A_h^{1/3}+A_l^{1/3})}. \\] <p>The value of \\(\\beta\\) will be discussed in a later section, as an example of a physics study that can be carried out using FFDD.</p>"},{"location":"physics/#fission-fragments-excitation-energy","title":"Fission fragments excitation energy","text":"<p>The Total Excitation Energy (TXE) of the fission fragments can be obtained from energy conservation. It corresponds to the portion of the available energy that is not converted into kinetic energy</p> \\[ TXE(A_h,Z_h,A_l,Z_l) = Q(A_h,Z_h,A_l,Z_l) - TKE(A_h,Z_h,A_l,Z_l). \\] <p>This total excitation energy is then distributed between the two fragments</p> \\[ TXE(A_h,Z_h,A_l,Z_l)=XE_h(A_h,Z_h,A_l,Z_l) + XE_l(A_h,Z_h,A_l,Z_l), \\] <p>where \\(XE_h\\) and \\(XE_l\\) are the individual excitation energies of the heavy and light fragments, respectively. But how is this energy partitioned between the two? This fundamental question in nuclear fission is still not fully resolved. However, experimental observations consistently indicate that the heavy fragment tends to receive a larger fraction of the total excitation energy.</p> <p>Let us denote by \\(x\\) the mysterious partition factor, such that the excitation energy of the light fragment is given by \\(XE_l=x\\,TXE\\) and that of the heavy fragment by \\(XE_h=(1-x)\\,TXE\\). As a first approximation, some models assume that the fragments behave like ideal gases of nucleons in thermal equilibrium [6]. In this picture, the excitation energy would be shared proportionally to the number of degrees of freedom \u2014 i.e., to the mass of each fragment,</p> \\[ x = \\frac{A_l}{A_h+A_l}. \\] <p>This assumption is sometimes referred as the Fong model. Another model, the von Edigy model uses density level parameters for each fragment, \\(a_h\\) and \\(a_l\\) tabulated in the literature [7], to build an alternative partition factor with fission fragments at thermal equilibrium:</p> \\[ x = \\frac{a_l}{a_h+a_l}. \\] <p>Fission fragments can be created with different nuclear temperatures at scission, respetively denoted by \\(T_h\\) and \\(T_l\\). The partition factor changes as \\(x \\mapsto R_T^2 \\, x\\), with the anisothermal factor</p> \\[ R_T = \\frac{T_l}{T_h}. \\]"},{"location":"physics/#decay-of-fission-fragments","title":"Decay of fission fragments","text":"<p>For a given fragmentation of the fissioning nucleus, the excitation energies of the heavy and light fragments, \\(XE_h\\) and \\(XE_l\\), can be estimated using the simple models introduced in the previous sections. The decay of each fragment is then simulated as a sequential emission of neutrons, occurring as long as the remnant excitation energy allows it. After each neutron emission, the available excitation energy is reduced by the neutron separation energy, \\(S_n\\), and by the kinetic energy of the emitted neutron, \\(e_n\\). The pseudo-code describing the decay of a single fragment through neutron evaporation is shown below.</p> <pre><code>nu = 0 # counter of emitted neutrons\n\nWhile XE &gt; Sn(A,Z)\n    nu &lt;-- nu + 1\n    XE &lt;-- XE - Sn(A,Z) - e_n\n    A  &lt;-- A - 1\n</code></pre> <p>The neutron separation energies \\(S_n\\) are taken from the same mass evaluation file released by LANL\u00a0[1] that was used to compute the \\(Q\\)-value. While the kinetic energy  \\(e_n\\) could, in principle, be sampled from statistical evaporation models, FFDD adopts a simplified approach and assumes a constant average value representative of most fission cases: \\(e_n\\approx 2\\) MeV [8]. This value can be modified by the user for further studies or sensitivity analyses.</p> <p>Once both fragments reach an excitation energy too low to allow further neutron emission, the emission process stops. The total number of neutrons emitted during this cascade corresponds to the average neutron multiplicity associated with the given fragmentation, denoted by \\(\\bar\\nu(A_h,Z_h,A_l,Z_l)\\). The average neutron multiplicity for the full fission process is then obtained by summing over all possible fragmentations, each weighted by its occurrence probability</p> \\[ \\bar\\nu = \\sum_{A_h,Z_h,A_l,Z_l} p(A_h,Z_h,A_l,Z_l)\\,\\bar\\nu(A_h,Z_h,A_l,Z_l). \\]"},{"location":"physics/#references","title":"References","text":"<p>[1] https://t2.lanl.gov/nis/data/astro/molnix96/sepn.html</p> <p>[2] P. K. Romano et al., Annals Nucl. Energy 82, 90\u201397 (2015).</p> <p>[3] D. A. Brown et al., Nucl. Data Sheets 148 1\u2013142 (2018).</p> <p>[4] K. S. Krane, Introductory Nuclear Physics, Wiley, 1987.</p> <p>[6] P. Fong, Phys. Rev. 102, 43 (1956)</p> <p>[7] T. von Edigy and D. Bucurescu, Phys. Rev. C 72, 044311 (2005)</p> <p>[8] B. Mauss et al., Phys. Rev. C 111, 044611 (2025)</p>"}]}